version: "3.8"

services:
  application:
    image: log:latest
    container_name: application
    ports:
      - "8080:8080"
    volumes:
      - ./data/logs/filebeat:/workspace/logs/filebeat
    networks:
      - elk

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELK_VERSION}
    container_name: elasticsearch
    environment:
      - ES_JAVA_OPTS=${ES_JAVA_OPTS}
      - TZ=${TIME_ZONE}
      - cluster.name=docker-cluster
      - node.name=master
      - cluster.initial_master_nodes=master
      - network.host=0.0.0.0
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    healthcheck:
      test: nc -z localhost 9200 || exit 1
      interval: 5s
      timeout: 10s
      retries: 100
    volumes:
      - ./data/elasticsearch:/usr/share/elasticsearch/data
    networks:
      - elk

  kibana:
    image: docker.elastic.co/kibana/kibana:${ELK_VERSION}
    container_name: kibana
    environment:
      - ES_JAVA_OPTS=${ES_JAVA_OPTS}
      - TZ=${TIME_ZONE}
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    volumes:
      - ./data/kibana:/usr/share/kibana/data
    healthcheck:
      test: nc -z localhost 5601 || exit 1
      interval: 5s
      timeout: 10s
      retries: 120
    networks:
      - elk
    depends_on:
      elasticsearch: 
        condition: service_healthy

  logstash:
    image: docker.elastic.co/logstash/logstash:${ELK_VERSION}
    container_name: logstash
    environment:
      - ES_JAVA_OPTS=${ES_JAVA_OPTS}
      - TZ=${TIME_ZONE}
    ports:
      - "5044:5044"
    volumes:
      - ./config/logstash/pipeline:/usr/share/logstash/pipeline
    healthcheck:
      test: nc -z localhost 5044 || exit 1
      interval: 5s
      timeout: 10s
      retries: 100
    networks:
      - elk
    depends_on:
      elasticsearch: 
        condition: service_healthy

  filebeat:
    image: docker.elastic.co/beats/filebeat:${ELK_VERSION}
    container_name: filebeat
    environment:
      - TZ=${TIME_ZONE}
    volumes:
      - ./config/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml
      - ./data/filebeat/registry:/usr/share/filebeat/data/registry
      - ./data/logs/filebeat:/usr/share/filebeat/input
    networks:
      - elk
    depends_on:
      kafka: 
        condition: service_healthy

  kafka:
    container_name: kafka
    image: quay.io/strimzi/kafka:latest-kafka-3.1.0-amd64
    command:
      [
        "sh",
        "-c",
        "export CLUSTER_ID=$$(bin/kafka-storage.sh random-uuid) && 
        bin/kafka-storage.sh format -t $$CLUSTER_ID -c config/kraft/server.properties && 
        bin/kafka-server-start.sh config/kraft/server.properties --override advertised.listeners=$${KAFKA_ADVERTISED_LISTENERS} --override listener.security.protocol.map=$${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP} --override listeners=$${KAFKA_LISTENERS}
        ",
      ]
    ports:
      - "9092:9092"
    environment:
      LOG_DIR: "/tmp/logs"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://:29092,PLAINTEXT_HOST://:9092,CONTROLLER://:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://172.20.10.2:9092
    volumes:
      - ./data/kafka/tmp/logs:/tmp/logs
    healthcheck:
      test: nc -z localhost 9092 || exit 1
      interval: 5s
      timeout: 10s
      retries: 10
    networks:
      - elk

  kafka-config:
    container_name: kafka-config
    image: quay.io/strimzi/kafka:latest-kafka-3.1.0-amd64
    depends_on:
      kafka:
        condition: service_healthy
    command:
      [
        "sh",
        "-c",
        "bin/kafka-topics.sh --create --bootstrap-server kafka:9092 --if-not-exists --partitions 1 --replication-factor 1 --topic beats",
      ]
    networks:
      - elk

networks:
  elk:
    driver: bridge